openapi: 3.0.2
info:
  title: Gateway Service API
  description: This document describes the APIs that are provided directly by the
    Gateway service of the Perceptia application. All other APIs in the Perceptia
    application are handled by seperate services which the Gateway passes along.
  contact:
    name: Thalesians
    email: uw-thalesians@u.washington.edu
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
servers:
- url: https://api.perceptia.info
  description: Perceptia Production API Server
- url: https://api.dev.perceptia.info
  description: Perceptia Development API Server
- url: https://localhost:{port}
  description: Localhost Development API Server
  variables:
    port:
      description: The port the server listens on
      default: "4443"
paths:
  /api/v1/gateway/health:
    get:
      tags:
      - health
      summary: Reports the status of the gateway, and the services it exposes.
      description: Provides basic health information about the gateway. Output can
        be expanded and filtered using the optional query parameters.
      operationId: getGatewayHealth
      responses:
        200:
          description: health response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /api/v1/gateway/users:
    post:
      tags:
      - new user
      summary: Creates an account for the provided user and logs them in.
      description: 'Creates an account using the provided account information and
        returns the created user. Additionally, will create a new session, thus login
        in the user, saving the session token as an Authorization header, with the
        Bearer authorization scheme. Note: Currently if email is provided it is discarded.'
      operationId: postGatewayUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        201:
          description: Basic user object containing the users UUID in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: User made a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Username provided already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        415:
          description: Content-Type header did not contain application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error occured on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/gateway/users/{userUuid}:
    get:
      tags:
      - users
      summary: Gets the basic account information for the given user.
      description: This will return the basic account information for a user of the
        system. Requires the client to be in an authenticated. Only the user can request
        their own information. (Authorization header required, see '#/components/headers/Authorization')
      operationId: getGatewayUsers
      parameters:
      - name: userUuid
        in: path
        description: v4 uuid for user being requested
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: a3865f94-0c83-4e29-b6cc-1d295d062f50
      responses:
        200:
          description: Basic user object containing the users UUID in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: User made a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: user is not in an authenticated session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found or unsupported major api version used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error occured on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-headers:
      - $ref: '#/components/headers/Authorization'
    delete:
      tags:
      - users
      summary: Deletes the user of the current session.
      description: This request will delete the users account with no review or waiting
        period. This method is very risky and should be used only with additional
        client side checks. User must be in an authenticated session. Only the user
        can delete their own account. (Authorization header required, see '#/components/headers/Authorization')
      operationId: deleteGatewayUsers
      parameters:
      - name: userUuid
        in: path
        description: v4 uuid for user being requested
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: a3865f94-0c83-4e29-b6cc-1d295d062f50
      responses:
        200:
          description: User deleted and session ended.
          content:
            text/plain:
              schema:
                type: string
              example: account deleted successfully
        400:
          description: User made a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: user is not in an authenticated session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: User tried to delete a user other than themself
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found or unsupported major api version used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error occured on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-headers:
      - $ref: '#/components/headers/Authorization'
  /api/v1/gateway/sessions:
    post:
      tags:
      - new session
      summary: Start a sesssion for the user.
      description: Uses the provided credentials to start a new session for the user.
        This request returns and authentication token which when provided in future
        requests allows the request to be authorized as that user without having to
        provide their credentials with each request. If no body is present, will start
        an unauthenticated session. This session can be upgraded to an authenticated
        session by making a repeat call to this endpoint with the UserCredentials
        object in the body.
      operationId: postGatewaySessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        201:
          description: Session created and added to Authorization header. If no body
            was provided in request then there will be no response body.
          headers:
            Authorization:
              $ref: '#/components/headers/Authorization'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: User made a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Username provided already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        415:
          description: Content-Type header did not contain application/json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error occured on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/gateway/sessions/{sessionIdentifier}}:
    delete:
      tags:
      - sessions
      summary: Deletes the current session.
      description: This request will delete the current session. Once deleted the
        authorization token will no longer be valid. (Authorization header required,
        see '#/components/headers/Authorization')
      operationId: deleteGatewaySessions
      parameters:
      - name: sessionIdentifier
        in: path
        description: currently, only supported value is "this"
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Session removed successfully.
          content:
            text/plain:
              example: session ended
        400:
          description: User made a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: user is not in an authenticated session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Major api version unsupported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error occured on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-headers:
      - $ref: '#/components/headers/Authorization'
components:
  schemas:
    Health:
      required:
      - name
      - status
      type: object
      properties:
        name:
          type: string
          description: human text describing health report
          example: Perceptia API Health Report
        status:
          type: string
          description: |
            "Current status of the gateway, one of: starting: gateway is still coming up and may not respond to all requests; ready: ready to recieve requests; failed: some error has occured, quality of a given response is unknown"
          example: ready
          enum:
          - starting
          - ready
          - failed
    NewUser:
      required:
      - displayName
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 255
          minLength: 3
          type: string
          description: name to represent the user by in the system
          example: joeuser
        fullName:
          maxLength: 255
          type: string
          description: full name of the user
          example: Joe John User
        displayName:
          maxLength: 255
          type: string
          description: will be used to refer to the user in most locations on site
            where a name is needed for the user
          example: Joe
        password:
          maxLength: 500
          minLength: 8
          type: string
          description: the password the user will provide to authenticate with the
            system
          example: really secure password!
        email:
          type: string
          description: an optional email the user would like associated with their
            account
          example: joeuser@example.com
    User:
      required:
      - displayName
      - username
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: the unique user id for the given user using rfc4122 uuid v4
          example: a3865f94-0c83-4e29-b6cc-1d295d062f50
        username:
          maxLength: 255
          minLength: 3
          type: string
          description: name to represent the user by in the system
          example: joeuser
        displayName:
          maxLength: 255
          type: string
          description: will be used to refer to the user in most locations on site
            where a name is needed for the user
          example: Joe
    UserCredentials:
      required:
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 255
          minLength: 3
          type: string
          description: name the user is represented by in the system
          example: joeuser
        password:
          maxLength: 500
          minLength: 8
          type: string
          description: the password the user will provide to authenticate with the
            system
          example: really secure password!
    Error:
      type: object
      properties:
        reference:
          type: string
          description: reference uuid associated with error to support troubleshooting
          example: a3865f94-0c83-4e29-b6cc-1d295d062f50
        clientError:
          type: boolean
          description: if true error was caused by issue with clients request
        serverError:
          type: boolean
          description: if true error was caused by unexpecter error on server
        message:
          type: string
          description: human text explaining error
        context:
          type: string
          description: human text explaining context error occured in
        code:
          type: integer
          description: currently unused
  responses:
    Unauthenticated:
      description: user is not in an authenticated session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnexpectedError:
      description: Unexpected error occured on server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ContentTypeNotJson:
      description: Content-Type header did not contain application/json
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    ApiVersion:
      name: apiVersion
      in: query
      description: notes the minimum major.minor.path version of the given API the
        request expects
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: 0.2.0
    UserUuid:
      name: userUuid
      in: path
      description: v4 uuid for user being requested
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: a3865f94-0c83-4e29-b6cc-1d295d062f50
    SessionIdentifier:
      name: sessionIdentifier
      in: path
      description: currently, only supported value is "this"
      required: true
      style: simple
      explode: false
      schema:
        type: string
  headers:
    Authorization:
      description: The authorization token used to authenticate the user accross requests
      style: simple
      explode: false
      schema:
        type: string
