# File: azure-pipelines.yml
# Main AZP YAML file for uw-thalesians/perceptia-servers

name: $(Build.BuildId)

variables:
  - group: Common
  # Gateway Variables
  - name: GatewayVersion
    value: '0.2.0'
  - name: GatewayImageQualified
    value: '$(DockerHubOrg)/$(GatewayImageName)'
  # Mssql Variables
  - name: MssqlVersion
    value: '0.7.1'
  - name: MssqlImageQualified
    value: '$(DockerHubOrg)/$(MssqlImageName)'
  # Aqrest Variables
  - name: AqrestVersion
    value: '1.1.0'
  - name: AqrestImageQualified
    value: '$(DockerHubOrg)/$(AqrestImageName)'
  # Aqmysql Variables
  - name: AqmysqlVersion
    value: '1.1.0'
  - name: AqmysqlImageQualified
    value: '$(DockerHubOrg)/$(AqmysqlImageName)'
  # Aqsolr Variables
  - name: AqmysqlVersion
    value: '1.1.0'
  - name: AqsolrImageQualified
    value: '$(DockerHubOrg)/$(AqsolrImageName)'
  

trigger:
  branches:
    include:
    - develop
    - feature/*
    - hotfix/*
    - release/*
  paths:
    include:
      - infrastructure/azp/*
      - '*'
    exclude:
    - README.md
    - infrastructure/*

pr:
  autoCancel: true
  branches:
    include:
    - master
    - develop
    - release/*
  paths:
    exclude:
    - README.md
    - infrastructure/*

jobs: 
- job: 'TestGatewayUnitTests'
  variables:
    GOBIN:  '$(GOPATH)/bin' # Go binaries path
    GOROOT: '/usr/local/go1.12.1' # Go installation path
    GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
    modulePath: '$(system.defaultWorkingDirectory)/gateway/gateway' # Path to the module's code
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
    - template: 'infrastructure/azp/template/step/goSetupDirectory.yml'
      parameters:
        GOBIN: $(GOBIN)
        GOROOT: $(GOROOT)
        GOPATH: $(GOPATH)
    - bash: go get -v -d ./...
      workingDirectory: '$(modulePath)'
      displayName: 'Get dependencies'
    - bash: go test -tags=unit ./...
      workingDirectory: '$(modulePath)'
      displayName: 'Run unit tests'
- job: 'BuildGatewayImage'
  variables:
  - name: ImageTagVersion
    value: '$(GatewayImageQualified):$(GatewayVersion)'
  - name: ImageTagVersionBuildId
    value: '$(ImageTagVersion)-build-$(Build.BuildId)'
  - name: ImageTagVersionBuildIdBranch
    value: '$(ImageTagVersionBuildId)-branch-$(Build.SourceBranchName)'
  - name: ImageTagVersionLatestBranch
    value: '$(ImageTagVersion)-build-latest-branch-$(Build.SourceBranchName)'
  pool:
    vmImage: 'Ubuntu-16.04'
  dependsOn: 'TestGatewayUnitTests'
  condition: succeeded()
  steps:
  - template: 'infrastructure/azp/template/step/dockerStandardBuild.yml'
    parameters:
      dockerFile: '$(system.defaultWorkingDirectory)/gateway/Dockerfile'
      qualifiedImageName: $(GatewayImageQualified)
  - template: 'infrastructure/azp/template/step/dockerStandardTagPush.yml'
    parameters:
      qualifiedImageName: $(GatewayImageQualified)
      versionLatestBranchTag: $(ImageTagVersionLatestBranch)
      versionBuildIdBranchTag: $(ImageTagVersionBuildIdBranch)
      versionTag: $(ImageTagVersion)
      versionBuildIdTag: $(ImageTagVersionBuildId)
      tagProduction: or(eq(variables[ 'productionTags'], 'true'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/master/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
- job: 'BuildMssqlImage'
  variables:
  - name: ImageTagVersion
    value: '$(MssqlImageQualified):$(MssqlVersion)'
  - name: ImageTagVersionBuildId
    value: '$(ImageTagVersion)-build-$(Build.BuildId)'
  - name: ImageTagVersionBuildIdBranch
    value: '$(ImageTagVersionBuildId)-branch-$(Build.SourceBranchName)'
  - name: ImageTagVersionLatestBranch
    value: '$(ImageTagVersion)-build-latest-branch-$(Build.SourceBranchName)'
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - template: 'infrastructure/azp/template/step/dockerStandardBuild.yml'
    parameters:
      dockerFile: '$(system.defaultWorkingDirectory)/database/mssql/Dockerfile'
      qualifiedImageName: $(MssqlImageQualified)
  - template: 'infrastructure/azp/template/step/dockerStandardTagPush.yml'
    parameters:
      qualifiedImageName: $(MssqlImageQualified)
      versionLatestBranchTag: $(ImageTagVersionLatestBranch)
      versionBuildIdBranchTag: $(ImageTagVersionBuildIdBranch)
      versionTag: $(ImageTagVersion)
      versionBuildIdTag: $(ImageTagVersionBuildId)
      tagProduction: or(eq(variables[ 'productionTags'], 'true'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/master/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
- job: 'BuildAqrestImage'
  variables:
  - name: ImageTagVersion
    value: '$(AqrestImageQualified):$(AqrestVersion)'
  - name: ImageTagVersionBuildId
    value: '$(ImageTagVersion)-build-$(Build.BuildId)'
  - name: ImageTagVersionBuildIdBranch
    value: '$(ImageTagVersionBuildId)-branch-$(Build.SourceBranchName)'
  - name: ImageTagVersionLatestBranch
    value: '$(ImageTagVersion)-build-latest-branch-$(Build.SourceBranchName)'
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - template: './infrastructure/azp/template/step/dockerStandardBuild.yml'
    parameters:
      dockerFile: '$(system.defaultWorkingDirectory)/REST/Dockerfile'
      qualifiedImageName: $(AqrestImageQualified)
  - template: './infrastructure/azp/template/step/dockerStandardTagPush.yml'
    parameters:
      qualifiedImageName: $(AqrestImageQualified)
      versionLatestBranchTag: $(ImageTagVersionLatestBranch)
      versionBuildIdBranchTag: $(ImageTagVersionBuildIdBranch)
      versionTag: $(ImageTagVersion)
      versionBuildIdTag: $(ImageTagVersionBuildId)
      tagProduction: or(eq(variables[ 'productionTags'], 'true'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/master/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))